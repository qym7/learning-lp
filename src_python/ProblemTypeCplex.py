from ProblemTypeInterface import ProblemType, ProblemFactory
from Problem import Problem
import cplex
import numpy as np

"""
This module is incomplete, compare with ProblemTypeInterface.

get_matrix must be modified. documentation incomplete.
"""


class CplexType(ProblemType):
    def create(self):
        return cplex.Cplex()

    def read(self, problem, filename):
        """Loads problem from file."""
        problem.content.read(filename)

    def get_RHS(self, problem, cons_to_vary=None, all_cons=False):
        """
        Returns the RHS of the linear optimisation problem.

        Arguments
        ---------
        problem : problem instance
        cons_to_vary : int list
            indices of RHS to be returned
        all_cons : bool
            when True, all constraints are returned

        Returns
        -------
        rhs : float list (IMPORTANT)
        """
        if all_cons:
            return problem.content.linear_constraints.get_rhs()
        else:
            return problem.content.linear_constraints.get_rhs(cons_to_vary)

    def get_matrix(self, problem):
        """
        Returns constraint matrix of the linear optimisation problem.

        Returns
        -------
        matrix : float list list
        """
        return problem.content.linear_constraints.get_rows()

    def set_RHS(self, problem, rhs):
        """
        Changes the RHS of the linear optimisation problem to the input.

        Arguments
        ---------
        rhs : (int, float) list
        """
        problem.content.linear_constraints.set_rhs(rhs)

    def get_constraint_names(self, problem):
        """
        Returns list of names of constraints of the linear optimisation problem.

        Returns
        -------
        name list : string list
        """
        return problem.content.linear_constraints.get_names()

    def get_variable_names(self, problem):
        """
        Returns list of names of variables of the linear optimisation problem.

        Returns
        -------
        name list : string list
        """
        return problem.content.variables.get_names()

    def solve(self, problem):
        """Solves the linear optimisation problem."""
        problem.content.solve()

    def get_objective_value(self, problem):
        """Returns the solution of the linear optimisation problem (objective value)."""
        return problem.content.solution.get_objective_value()

    def mute_solver(self, problem):
        """Disables all messages generated by the solver while solving the optimisation problem."""
        problem.content.set_log_stream(None)
        problem.content.set_error_stream(None)
        problem.content.set_warning_stream(None)
        problem.content.set_results_stream(None)

    def var_get_bounds(self, problem, ind):
        """Returns the bounds of the variable with index ind."""
        lw_bnd = problem.content.variables.get_lower_bounds(ind)
        up_bnd = problem.content.variables.get_upper_bounds(ind)
        return lw_bnd, up_bnd

    def var_set_bounds(self, problem, ind, lw_bnd, up_bnd):
        """Sets the bounds of the variable with index ind to lw_bnd and up_bnd."""
        problem.content.variables.set_lower_bounds(ind, lw_bnd)
        problem.content.variables.set_upper_bounds(ind, up_bnd)

    def get_status(self, problem):
        """Returns the status of the solution"""
        return problem.content.solution.get_status()

    def is_feasible(self, problem):
        """True if problem is feasible."""
        if problem.get_status() == 3:
            return False
        else:
            return True


class CplexProblemFactory(ProblemFactory):

    def get_problem_instance(self) -> Problem:
        return Problem(prob_type=CplexType())

    def read_problem_from_file(self, filename: str, simple_problem=False) -> Problem:
        p = Problem(simple_problem=simple_problem, prob_type=CplexType())
        p.read(filename)
        return p