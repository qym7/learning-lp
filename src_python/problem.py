"""
Interface for linear optimisation problems as needed in problem_generator and
problem_selector. The default implementation of the interface is Cplex_problem.
"""


class Problem:

    def read(self, filename):
        """Loads problem from file."""
        pass

    def get_RHS(self):
        """
        Returns the RHS of the linear optimisation problem.

        Returns
        -------
        rhs : float list (IMPORTANT)
        """
        pass

    def set_RHS(self, rhs):
        """
        Changes the RHS of the linear optimisation problem to the input.

        Arguments
        ---------
        rhs : (int, float) list
            the format required by cplex (IMPORTANT)
        """
        pass

    def get_constraint_names(self):
        """
        Returns list of names of constraints of the linear optimisation problem.

        Returns
        -------
        name list : string list
        """
        pass

    def solve(self):
        """Solves the linear optimisation problem."""
        pass

    def get_objective_value(self):
        """Returns the solution of the linear optimisation problem (objective value)."""
        pass

    def mute_solver(self):
        """Disables all messages generated by the solver while solving the optimisation problem."""
        pass


class Problem_factory:

    def get_problem_instance(self) -> Problem:
        pass

    def read_problem_from_file(self, filename: str) -> Problem:
        pass


import cplex


class Cplex_problem(Problem):

    def __init__(self):
        self.content = cplex.Cplex()
        self.mute_solver()

    def read(self, filename):
        """Loads problem from file."""
        self.content.read(filename)

    def get_RHS(self):
        """
        Returns the RHS of the linear optimisation problem.

        Returns
        -------
        rhs : float list
        """
        return self.content.linear_constraints.get_rhs()

    def set_RHS(self, rhs):
        """
        Changes the RHS of the linear optimisation problem to the input.

        Arguments
        ---------
        rhs : (int, float) list
        """
        self.content.linear_constraints.set_rhs(rhs)

    def get_constraint_names(self):
        """
        Returns list of names of constraints of the linear optimisation problem.

        Returns
        -------
        name list : string list
        """
        return self.content.linear_constraints.get_names()

    def solve(self):
        """Solves the linear optimisation problem."""
        self.content.solve()

    def get_objective_value(self):
        """Returns the solution of the linear optimisation problem (objective value)."""
        return self.content.solution.get_objective_value()

    def mute_solver(self):
        """Disables all messages generated by the solver while solving the optimisation problem."""
        self.content.set_log_stream(None)
        self.content.set_error_stream(None)
        self.content.set_warning_stream(None)
        self.content.set_results_stream(None)


class Cplex_Problem_Factory(Problem_factory):

    def get_problem_instance(self) -> Cplex_problem:
        return Cplex_problem()

    def read_problem_from_file(self, filename: str) -> Cplex_problem:
        p = Cplex_problem()
        p.read(filename)
        return p
