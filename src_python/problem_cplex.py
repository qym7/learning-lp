"""
Implementation for cplex of the Problem interface in problem_interface.py.
"""

from problem_interface import Problem, Problem_factory
import cplex


class Cplex_problem(Problem):

    def __init__(self):
        self.content = cplex.Cplex()
        self.mute_solver()

    def read(self, filename):
        """Loads problem from file."""
        self.content.read(filename)

    def get_RHS(self, cons_to_vary):
        """
        Returns the RHS of the linear optimisation problem.

        Arguments
        ---------
        cons_to_vary : int list
            indices of RHS to be returned

        Returns
        -------
        rhs : float list
        """
        return self.content.linear_constraints.get_rhs(cons_to_vary)

    def set_RHS(self, rhs):
        """
        Changes the RHS of the linear optimisation problem to the input.

        Arguments
        ---------
        rhs : (int, float) list
        """
        self.content.linear_constraints.set_rhs(rhs)

    def get_constraint_names(self):
        """
        Returns list of names of constraints of the linear optimisation problem.

        Returns
        -------
        name list : string list
        """
        return self.content.linear_constraints.get_names()

    def get_variable_names(self):
        """
        Returns list of names of variables of the linear optimisation problem.

        Returns
        -------
        name list : string list
        """
        return self.content.variables.get_names()

    def solve(self):
        """Solves the linear optimisation problem."""
        self.content.solve()

    def get_objective_value(self):
        """Returns the solution of the linear optimisation problem (objective value)."""
        return self.content.solution.get_objective_value()

    def mute_solver(self):
        """Disables all messages generated by the solver while solving the optimisation problem."""
        self.content.set_log_stream(None)
        self.content.set_error_stream(None)
        self.content.set_warning_stream(None)
        self.content.set_results_stream(None)

    def var_get_bounds(self, ind):
        """Returns the bounds of the variable with index ind."""
        lw_bnd = self.content.variables.get_lower_bounds(ind)
        up_bnd = self.content.variables.get_upper_bounds(ind)
        return lw_bnd, up_bnd

    def var_set_bounds(self, ind, lw_bnd, up_bnd):
        """Sets the bounds of the variable with index ind to lw_bnd and up_bnd."""
        self.content.variables.set_lower_bounds(ind, lw_bnd)
        self.content.variables.set_upper_bounds(ind, up_bnd)

    def get_status(self):
        """Returns the status of the solution"""
        return self.content.solution.get_status()

    def is_feasible(self):
        """True if problem is feasible."""
        if self.get_status() == 3:
            return False
        else:
            return True

class Cplex_Problem_Factory(Problem_factory):

    def get_problem_instance(self) -> Cplex_problem:
        return Cplex_problem()

    def read_problem_from_file(self, filename: str) -> Cplex_problem:
        p = Cplex_problem()
        p.read(filename)
        return p


# if __name__ == '__main__':
#
#     petit_probleme = Cplex_Problem_Factory().read_problem_from_file("petit_probleme.lp")
#     petit_probleme.set_RHS([(25, -24.16852086)])
#     petit_probleme.solve()
#     print(petit_probleme.get_objective_value())
#     print(petit_probleme.get_status())
